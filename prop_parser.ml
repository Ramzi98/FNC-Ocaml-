type token =
  | ET
  | OU
  | IMPLIQ
  | EQUIV
  | NEG
  | LPAR
  | RPAR
  | QUIT
  | Vrai
  | Faux
  | VAR of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "prop_parser.mly"
open Prop_def;;
# 20 "prop_parser.ml"
let yytransl_const = [|
  257 (* ET *);
  258 (* OU *);
  259 (* IMPLIQ *);
  260 (* EQUIV *);
  261 (* NEG *);
  262 (* LPAR *);
  263 (* RPAR *);
  264 (* QUIT *);
  265 (* Vrai *);
  266 (* Faux *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  267 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\002\000\004\000\003\000\005\000\
\003\000\005\000\003\000\005\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\003\000\004\000\002\000\015\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\012\000\
\014\000\008\000\010\000"

let yydgoto = "\002\000\
\008\000\009\000"

let yysindex = "\005\000\
\022\255\000\000\022\255\029\255\000\000\000\000\000\000\000\000\
\010\000\000\000\022\255\010\255\022\255\022\255\022\255\022\255\
\000\000\253\254\022\255\022\255\022\255\022\255\007\255\000\000\
\051\255\063\255\000\000\254\254\009\255\040\255\044\255\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\255\000\000\000\000\000\000\000\000\001\000\000\000\
\002\000\003\000\000\000\065\255\059\255\000\000\018\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\004\000"

let yytablesize = 270
let yytable = "\014\000\
\011\000\007\000\009\000\027\000\032\000\001\000\010\000\012\000\
\014\000\017\000\019\000\020\000\021\000\022\000\018\000\033\000\
\023\000\024\000\025\000\026\000\009\000\000\000\028\000\029\000\
\030\000\031\000\003\000\004\000\000\000\000\000\005\000\006\000\
\007\000\011\000\004\000\000\000\000\000\005\000\006\000\007\000\
\013\000\014\000\015\000\016\000\013\000\014\000\034\000\016\000\
\000\000\000\000\035\000\013\000\014\000\015\000\016\000\005\000\
\005\000\005\000\005\000\013\000\013\000\013\000\013\000\013\000\
\014\000\011\000\016\000\011\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\011\000\011\000\009\000\000\000\011\000\
\007\000\009\000\013\000\014\000\015\000\016\000"

let yycheck = "\002\001\
\000\000\000\000\000\000\007\001\007\001\001\000\003\000\004\000\
\002\001\000\000\001\001\002\001\003\001\004\001\011\000\007\001\
\013\000\014\000\015\000\016\000\003\001\255\255\019\000\020\000\
\021\000\022\000\005\001\006\001\255\255\255\255\009\001\010\001\
\011\001\005\001\006\001\255\255\255\255\009\001\010\001\011\001\
\001\001\002\001\003\001\004\001\001\001\002\001\007\001\004\001\
\255\255\255\255\007\001\001\001\002\001\003\001\004\001\001\001\
\002\001\003\001\004\001\001\001\002\001\003\001\004\001\001\001\
\002\001\001\001\004\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\003\001\255\255\007\001\
\007\001\007\001\001\001\002\001\003\001\004\001"

let yynames_const = "\
  ET\000\
  OU\000\
  IMPLIQ\000\
  EQUIV\000\
  NEG\000\
  LPAR\000\
  RPAR\000\
  QUIT\000\
  Vrai\000\
  Faux\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 18 "prop_parser.mly"
                                                  (_1)
# 172 "prop_parser.ml"
               : Prop_def.proposition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 21 "prop_parser.mly"
                 (Var (_1))
# 179 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "prop_parser.mly"
                                                 (Vrai)
# 185 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    Obj.repr(
# 23 "prop_parser.mly"
                                                ( Faux)
# 191 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proplog) in
    Obj.repr(
# 24 "prop_parser.mly"
                  ((NEG (_2)))
# 198 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 25 "prop_parser.mly"
                           ((NEG (_3)))
# 205 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proplog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proplog) in
    Obj.repr(
# 26 "prop_parser.mly"
                               ((IMPLIQ (_1,_3)))
# 213 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'proplog) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 27 "prop_parser.mly"
                                        ((IMPLIQ (_2,_4)))
# 221 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proplog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proplog) in
    Obj.repr(
# 29 "prop_parser.mly"
                            ((EQUIV(_1,_3) ))
# 229 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'proplog) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 30 "prop_parser.mly"
                                       ((EQUIV (_2,_4) ))
# 237 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proplog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proplog) in
    Obj.repr(
# 32 "prop_parser.mly"
                             ((ET (_1,_3)))
# 245 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'proplog) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 33 "prop_parser.mly"
                                   ((ET (_2,_4)))
# 253 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proplog) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proplog) in
    Obj.repr(
# 34 "prop_parser.mly"
                         ((OU (_1,_3)))
# 261 "prop_parser.ml"
               : 'proplog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'proplog) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'proplog) in
    Obj.repr(
# 35 "prop_parser.mly"
                                  ((OU (_2,_4)))
# 269 "prop_parser.ml"
               : 'proplog))
(* Entry programme *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let programme (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Prop_def.proposition)
